import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import altair as alt

st.set_page_config(page_title="SensÃ¶r Verileri", page_icon="ğŸ“Š")

# GiriÅŸ kontrolÃ¼ (token kontrolÃ¼)
if "token" not in st.session_state:
    st.warning("Bu sayfaya eriÅŸmek iÃ§in giriÅŸ yapmalÄ±sÄ±nÄ±z.")
    st.stop()

st.title("ğŸ“Š SensÃ¶r Verileri")
st.write("Bu sayfada sensÃ¶r verilerini izleyebilirsiniz.")

# KullanÄ±cÄ± adÄ± gÃ¶sterimi (varsa)
if "username" in st.session_state:
    st.subheader(f"Merhaba, **{st.session_state['username']}**!")

# KullanÄ±cÄ±dan seÃ§imler al
sensor_type = st.radio("SensÃ¶r Tipi SeÃ§", ["EMG Kas SensÃ¶rÃ¼", "Flex SensÃ¶rleri"], horizontal=True)
body_part = st.radio("VÃ¼cut BÃ¶lgesi", ["Ayak", "Bacak"], horizontal=True)
time_range = st.selectbox("Zaman AralÄ±ÄŸÄ±", ["Son 7 GÃ¼n", "Son 30 GÃ¼n", "Son 365 GÃ¼n"])

# Tarih hesaplama
today = datetime.today().date()
if time_range == "Son 7 GÃ¼n":
    start_date = today - timedelta(days=7)
elif time_range == "Son 30 GÃ¼n":
    start_date = today - timedelta(days=30)
else:
    start_date = today - timedelta(days=365)

num_days = (today - start_date).days
# Tarih listesini kronolojik (artan) sÄ±rada oluÅŸtur
dates = [start_date + timedelta(days=i) for i in range(num_days + 1)]

# SensÃ¶r verisi oluÅŸturma (Ã¶rnek veriler)
if sensor_type == "EMG Kas SensÃ¶rÃ¼":
    df = pd.DataFrame({
        "Tarih": dates,
        "VÃ¼cut BÃ¶lgesi": [body_part] * len(dates),
        "EMG (mV)": [round(100 + i * 0.5 + (i % 5) * 2.5, 2) for i in range(len(dates))]
    })

    st.subheader("ğŸ“‰ EMG Zaman Serisi GrafiÄŸi")
    emg_chart = alt.Chart(df).mark_line(point=True).encode(
        x="Tarih:T",
        y="EMG (mV):Q",
        tooltip=["Tarih", "EMG (mV)"]
    ).properties(width=700, height=300)
    st.altair_chart(emg_chart, use_container_width=True)

else:
    df = pd.DataFrame({
        "Tarih": dates,
        "VÃ¼cut BÃ¶lgesi": [body_part] * len(dates),
        "Flex1": [round(20 + (i % 3) * 1.5, 2) for i in range(len(dates))],
        "Flex2": [round(25 + (i % 4) * 1.3, 2) for i in range(len(dates))],
        "Flex3": [round(30 + (i % 5) * 1.1, 2) for i in range(len(dates))],
        "Flex4": [round(22 + (i % 6) * 1.2, 2) for i in range(len(dates))],
        "Flex5": [round(28 + (i % 7) * 1.4, 2) for i in range(len(dates))]
    })

    st.subheader("ğŸ“ˆ Flex SensÃ¶rleri GrafiÄŸi")
    flex_df = df.melt(id_vars=["Tarih"], value_vars=["Flex1", "Flex2", "Flex3", "Flex4", "Flex5"],
                      var_name="SensÃ¶r", value_name="DeÄŸer")
    flex_chart = alt.Chart(flex_df).mark_line(point=True).encode(
        x="Tarih:T",
        y="DeÄŸer:Q",
        color="SensÃ¶r:N",
        tooltip=["Tarih", "SensÃ¶r", "DeÄŸer"]
    ).properties(width=700, height=300)
    st.altair_chart(flex_chart, use_container_width=True)

# Veri tablosu
st.subheader("ğŸ“„ DetaylÄ± SensÃ¶r Verileri")
st.dataframe(df.sort_values("Tarih", ascending=False), use_container_width=True)

# Ã‡Ä±kÄ±ÅŸ butonu
if st.button("Ã‡Ä±kÄ±ÅŸ Yap"):
    # Oturumdan token ve kullanÄ±cÄ± adÄ±nÄ± sil
    if "token" in st.session_state:
        del st.session_state["token"]
    if "username" in st.session_state:
        del st.session_state["username"]
    # SayfayÄ± yenileyerek giriÅŸ sayfasÄ±na yÃ¶nlendirme
    st.experimental_rerun()
